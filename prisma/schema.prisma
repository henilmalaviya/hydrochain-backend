// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  role UserRole

  username String @unique
  password String

  companyName         String?
  governmentLicenseId String?

  // plant
  renewableEnergyProofId String?

  // wallet (plant, industry)
  walletAddress    String? @unique
  walletPrivateKey String?

  // assigned auditor for plants and industries
  assignedAuditor   User?   @relation("AuditorAssignment", fields: [assignedAuditorId], references: [id])
  assignedAuditorId String?

  // auditor can be assigned to multiple plants/industries
  assignedUsers User[] @relation("AuditorAssignment")

  lifeTimeGeneratedCredits   Float @default(0)
  lifeTimeTransferredCredits Float @default(0)
  lifeTimeRetiredCredits     Float @default(0)
  lifeTimeBoughtCredits      Float @default(0)

  sessions                   Session[]
  creditIssueRequests        CreditIssueRequest[] @relation(name: "issuedPlant")
  creditIssueRequestsActions CreditIssueRequest[] @relation(name: "issueRequestAuditor")

  creditBuyRequests CreditBuyRequest[] @relation(name: "creditBuyerPlant")
  CreditBuyRequest  CreditBuyRequest[] @relation(name: "creditSellingPlant")

  creditRetireRequests        CreditRetireRequest[] @relation(name: "retiringIndustry")
  creditRetireRequestsActions CreditRetireRequest[] @relation(name: "retireRequestAuditor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum UserRole {
  Plant
  Industry
  Auditor
}

model CreditIssueRequest {
  id String @id @default(uuid())

  user   User   @relation(name: "issuedPlant", fields: [userId], references: [id])
  userId String

  amount  Float
  txnHash String?

  status CreditIssueRequestStatus @default(PENDING)

  actionBy   User?   @relation(name: "issueRequestAuditor", fields: [actionById], references: [id])
  actionById String?

  metadata String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CreditIssueRequestStatus {
  PENDING
  ISSUED
  REJECTED
}

model CreditBuyRequest {
  id String @id @default(uuid())

  from   User   @relation(name: "creditSellingPlant", fields: [fromId], references: [id])
  fromId String

  creditId String
  txnHash  String?

  to   User   @relation(name: "creditBuyerPlant", fields: [toId], references: [id])
  toId String

  status CreditBuyRequestStatus @default(PENDING)

  metadata String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CreditBuyRequestStatus {
  PENDING
  TRANSFERRED
  REJECTED
}

model CreditRetireRequest {
  id String @id @default(uuid())

  user   User   @relation(name: "retiringIndustry", fields: [userId], references: [id])
  userId String

  creditId String  @unique
  txnHash  String?

  status CreditRetireRequestStatus @default(PENDING)

  actionBy   User?   @relation(name: "retireRequestAuditor", fields: [actionById], references: [id])
  actionById String?

  metadata String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CreditRetireRequestStatus {
  PENDING
  RETIRED
  REJECTED
}
